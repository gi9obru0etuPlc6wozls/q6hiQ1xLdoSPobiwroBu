#include <TreeFrogModel>
#include "{{ lower(uCamel(create table)) }}.h"
#include "{{ lower(uCamel(create table)) }}object.h"

{{ uCamel(create table) }}::{{ uCamel(create table) }}()
    : TAbstractModel(), d(new {{ uCamel(create table) }}Object())
{
    d->lock_revision = 0;
}

{{ uCamel(create table) }}::{{ uCamel(create table) }}(const {{ uCamel(create table) }} &other)
    : TAbstractModel(), d(new {{ uCamel(create table) }}Object(*other.d))
{ }

{{ uCamel(create table) }}::{{ uCamel(create table) }}(const {{ uCamel(create table) }}Object &object)
    : TAbstractModel(), d(new {{ uCamel(create table) }}Object(object))
{ }

{{ uCamel(create table) }}::~{{ uCamel(create table) }}()
{
    // If the reference count becomes 0,
    // the shared data object '{{ uCamel(create table) }}Object' is deleted.
}

//
// Columns Start
//
## for column in columns

QString {{ uCamel(create table) }}::{{ lCamel(column/name) }}() const
{
    return d->{{ column/name }};
}

void {{ uCamel(create table) }}::set{{ uCamel(column/name) }}(const QString &{{ lCamel( column/name ) }})
{
    d->{{ column/name }} = {{ lCamel( column/name ) }};
}

## endfor
//
// Columns End
//

{{ uCamel(create table) }} &{{ uCamel(create table) }}::operator=(const {{ uCamel(create table) }} &other)
{
    d = other.d;  // increments the reference count of the data
    return *this;
}

{{ uCamel(create table) }} {{ uCamel(create table) }}::create(

## for column in columns
        const {{ map("qt_type", column/type) }} &{{ lCamel(column/name) }}
## if not loop/is_last
,

## endif
## endfor
)
{
    {{ uCamel(create table) }}Object obj;

## for column in columns
    obj.{{ column/name }} = {{ lCamel(column/name) }};

## endfor
    if (!obj.create()) {
        return {{ uCamel(create table) }}();
    }
    return {{ uCamel(create table) }}(obj);
}

{{ uCamel(create table) }} {{ uCamel(create table) }}::create(const QVariantMap &values)
{
    {{ uCamel(create table) }} model;
    model.setProperties(values);
    if (!model.d->create()) {
        model.d->clear();
    }
    return model;
}

{{ uCamel(create table) }} {{ uCamel(create table) }}::get(const QString &id)
{
    TSqlORMapper<{{ uCamel(create table) }}Object> mapper;
    return {{ uCamel(create table) }}(mapper.findByPrimaryKey(id));
}

## for column1 in columns
## if existsIn(column1, "auto") and column1/auto
## for column2 in columns
## if column2/name == "lock_revision"

{{ uCamel(create table) }} {{ uCamel(create table) }}::get(const QString &{{ lCamel(column1/name) }}, int {{ lCamel(column2/name) }}) // --- Meep
{
    TSqlORMapper<{{ uCamel(create table) }}Object> mapper;
    TCriteria cri;
    cri.add({{ uCamel(create table) }}Object::{{ uCamel(column1/name) }}, {{ lCamel(column1/name) }});
    cri.add({{ uCamel(create table) }}Object::{{ uCamel(column2/name) }}, {{ lCamel(column2/name) }});
    return {{ uCamel(create table) }}(mapper.findFirst(cri));
}

## endif
## endfor
## endif
## endfor

int {{ uCamel(create table) }}::count()
{
    TSqlORMapper<{{ uCamel(create table) }}Object> mapper;
    return mapper.findCount();
}

QList<{{ uCamel(create table) }}> {{ uCamel(create table) }}::getAll()
{
    return tfGetModelListByCriteria<{{ uCamel(create table) }}, {{ uCamel(create table) }}Object>(TCriteria());
}

QList<{{ uCamel(create table) }}> {{ uCamel(create table) }}::getAll(const int limit,const int offset)
{
    return tfGetModelListByCriteria<{{ uCamel(create table) }}, {{ uCamel(create table) }}Object>(TCriteria(), limit, offset);
}

QJsonArray {{ uCamel(create table) }}::getAllJson()
{
    QJsonArray array;
    TSqlORMapper<{{ uCamel(create table) }}Object> mapper;

    if (mapper.find() > 0) {
        for (TSqlORMapperIterator<{{ uCamel(create table) }}Object> i(mapper); i.hasNext(); ) {
            array.append(QJsonValue(QJsonObject::fromVariantMap({{ uCamel(create table) }}(i.next()).toVariantMap())));
        }
    }
    return array;
}

TModelObject *{{ uCamel(create table) }}::modelData()
{
    return d.data();
}

const TModelObject *{{ uCamel(create table) }}::modelData() const
{
    return d.data();
}

QDataStream &operator<<(QDataStream &ds, const {{ uCamel(create table) }} &model)
{
    auto varmap = model.toVariantMap();
    ds << varmap;
    return ds;
}

QDataStream &operator>>(QDataStream &ds, {{ uCamel(create table) }} &model)
{
    QVariantMap varmap;
    ds >> varmap;
    model.setProperties(varmap);
    return ds;
}

// Don't remove below this line
T_REGISTER_STREAM_OPERATORS({{ uCamel(create table) }})
