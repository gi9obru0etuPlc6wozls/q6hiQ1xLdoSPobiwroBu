#include "{{ lower(lCamel(create table)) }}controller.h"
#include "{{ lower(lCamel(create table)) }}.h"


void {{ uCamel(create table) }}Controller::index()
{
    auto {{ lCamel(create table) }}List = {{ uCamel(create table) }}::getAll();
    texport({{ lCamel(create table) }}List);
    render();
}

void {{ uCamel(create table) }}Controller::show(const QString &{% include "tf_controller_param_pk.inja" %})
{
    auto {{ lCamel(create table) }} = {{ uCamel(create table) }}::get({% include "tf_controller_conv_pk.inja" %});
    texport({{ lCamel(create table) }});
    render();
}

void {{ uCamel(create table) }}Controller::xml(const QString &id)
{
    setContentType("text/xml");

    QDomDocument doc;

    QDomElement envelope = doc.createElementNS("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
    envelope.setPrefix("soap");

    QDomElement body = doc.createElement("soap:Body");

    QDomElement response = doc.createElementNS("http://framesquared.com/{{ uCamel(create table) }}", "m:Get{{ uCamel(create table) }}Response");
    {{ uCamel(create table) }}::getAllXml(doc, response, "m:");

    body.appendChild(response);
    envelope.appendChild(body);
    doc.appendChild(envelope);

    renderXml(doc);
}

void {{ uCamel(create table) }}Controller::create()
{
    switch (httpRequest().method()) {
    case Tf::Get:
        render();
        break;

    case Tf::Post: {
        auto {{ lCamel(create table) }} = httpRequest().formItems("{{ lCamel(create table) }}");
        auto model = {{ uCamel(create table) }}::create({{ lCamel(create table) }});

        if (!model.isNull()) {
            QString notice = "Created successfully.";
            tflash(notice);
            redirect(urla("show", model.{% include "tf_controller_param_pk.inja" %}()));
        } else {
            QString error = "Failed to create.";
            texport(error);
            texport({{ lCamel(create table) }});
            render();
        }
        break; }

    default:
        renderErrorResponse(Tf::NotFound);
        break;
    }
}

void {{ uCamel(create table) }}Controller::save(const QString &{% include "tf_controller_param_pk.inja" %})
{
    switch (httpRequest().method()) {
    case Tf::Get: {
        auto model = {{ uCamel(create table) }}::get({% include "tf_controller_conv_pk.inja" %});
        if (!model.isNull()) {
            session().insert("{{ lCamel(create table) }}_lockRevision", model.lockRevision());
            auto {{ lCamel(create table) }} = model.toVariantMap();
            texport({{ lCamel(create table) }});
            render();
        }
        break; }

    case Tf::Post: {
        QString error;
        int rev = session().value("{{ lCamel(create table) }}_lockRevision").toInt();
        auto model = {{ uCamel(create table) }}::get({% include "tf_controller_conv_pk.inja" %}, rev);

        if (model.isNull()) {
            error = "Original data not found. It may have been updated/removed by another transaction.";
            tflash(error);
            redirect(urla("save", {% include "tf_controller_param_pk.inja" %}));
            break;
        }

        auto {{ lCamel(create table) }} = httpRequest().formItems("{{ lCamel(create table) }}");
        model.setProperties({{ lCamel(create table) }});
        if (model.save()) {
            QString notice = "Updated successfully.";
            tflash(notice);
            redirect(urla("show", model.{% include "tf_controller_param_pk.inja" %}()));
        } else {
            error = "Failed to update.";
            texport(error);
            texport({{ lCamel(create table) }});
            render();
        }
        break; }

    default:
        renderErrorResponse(Tf::NotFound);
        break;
    }
}

void {{ uCamel(create table) }}Controller::remove(const QString &{% include "tf_controller_param_pk.inja" %})
{
    if (httpRequest().method() != Tf::Post) {
        renderErrorResponse(Tf::NotFound);
        return;
    }

    auto {{ lCamel(create table) }} = {{ uCamel(create table) }}::get({% include "tf_controller_conv_pk.inja" %});
    {{ lCamel(create table) }}.remove();
    redirect(urla("index"));
}


// Don't remove below this line
T_DEFINE_CONTROLLER({{ uCamel(create table) }}Controller)
