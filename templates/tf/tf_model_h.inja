#ifndef {{ upper(uCamel(create_table)) }}_H
#define {{ upper(uCamel(create_table)) }}_H

#include <QStringList>
#include <QDateTime>
#include <QVariant>
#include <QSharedDataPointer>
#include <TGlobal>
#include <TAbstractModel>

class TModelObject;
class {{ uCamel(create_table) }}Object;
class QJsonArray;


class T_MODEL_EXPORT {{ uCamel(create_table) }} : public TAbstractModel
{
public:
    {{ uCamel(create_table) }}();
    {{ uCamel(create_table) }}(const {{ uCamel(create_table) }} &other);
    {{ uCamel(create_table) }}(const {{ uCamel(create_table) }}Object &object);
    ~{{ uCamel(create_table) }}();

## for column in columns

    {{ map("qt_type", column/type) }} {{ lCamel(column/name) }}() const;
## if existsIn(column, "setter") and not column/setter

## else

    void set{{ uCamel(column/name) }}({% include "tf_model_create_param.inja" %});
## endif
## endfor

    {{ uCamel(create_table) }} &operator=(const {{ uCamel(create_table) }} &other);

    bool create() override { return TAbstractModel::create(); }
    bool update() override { return TAbstractModel::update(); }
    bool save()   override { return TAbstractModel::save(); }
    bool remove() override { return TAbstractModel::remove(); }

    static {{ uCamel(create_table) }} create(
## for column in columns
## if existsIn(column, "setter") and not column/setter

## else
{{ getValue("need_comma") }}{% include "tf_model_create_param.inja" %}{{ setValue("need_comma|, ") }}
## endif
## endfor
);{{ setValue("need_comma|") }}
    static {{ uCamel(create_table) }} create(const QVariantMap &values);
{% include "tf_model_h_get_pk.inja" %}
{% include "tf_model_h_get_pk_lock.inja" %}
    static int count();
    static QList<{{ uCamel(create_table) }}> getAll();
    static QList<{{ uCamel(create_table) }}> getAll(const int limit,const int offset);
    static QJsonArray getAllJson();
    static void getAllXml(QDomDocument &dom, QDomElement &element, const QString &prefix = "");
    static QDomElement getAllXml(QDomDocument &dom, const QString &prefix = "");
    QDomElement toXml(QDomDocument &dom, const QString &prefix) const;

private:
    QSharedDataPointer<{{ uCamel(create_table) }}Object> d;

    TModelObject *modelData() override;
    const TModelObject *modelData() const override;
    friend QDataStream &operator<<(QDataStream &ds, const {{ uCamel(create_table) }} &model);
    friend QDataStream &operator>>(QDataStream &ds, {{ uCamel(create_table) }} &model);
};

Q_DECLARE_METATYPE({{ uCamel(create_table) }})
Q_DECLARE_METATYPE(QList<{{ uCamel(create_table) }}>)

#endif // {{ upper(uCamel(create_table)) }}_H
